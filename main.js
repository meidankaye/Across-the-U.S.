!function(){"use strict";const e=[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}];e.reverse();var t=e;document.querySelector(".places");const s=document.querySelector("#place-template"),n=document.querySelector(".popup_type_edit").querySelector(".popup__form"),i=document.querySelector(".popup_type_add").querySelector(".popup__form"),o=document.querySelector(".profile__edit-button"),r=document.querySelector(".profile__add-button"),l=document.querySelector(".popup__input_type_name"),a=document.querySelector(".popup__input_type_profession"),p={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function u(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function c(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}var _=class{constructor(e,t){c(this,"_showInputError",(e=>{const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)})),c(this,"_hideInputError",(e=>{const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)})),c(this,"_hasOnlyValidInputs",(()=>this._inputList.every((e=>e.validity.valid)))),c(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e)})),c(this,"_setEventListeners",(()=>{this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))})),c(this,"_toggleButton",(()=>{this._hasOnlyValidInputs()?(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)})),c(this,"resetFormValidation",(()=>{this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButton()})),c(this,"enableValidation",(()=>{this._setEventListeners()})),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}},h=class{constructor(e){this._popupElement=document.querySelector(e),this._handleEscUp=this._handleEscUp.bind(this),this.close=this.close.bind(this)}_handleEscUp(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",this.close),this._popupElement.addEventListener("mousedown",(e=>{[...e.target.classList].includes("popup")&&this.close()}))}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscUp)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscUp)}},d=class extends h{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".popup__form"),this._inputList=Array.from(this._popupForm.querySelectorAll(".popup__input")),this._submitHandler=t}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(this._getInputValues()),this.close()})),super.setEventListeners()}close(){this._popupForm.reset(),super.close()}};function m(e){E.addItem(function(e){return new class{constructor(e,t,s){u(this,"_setEventListeners",(()=>{this._cardElement.querySelector(".place__image").addEventListener("click",(()=>this._handleCardClick(this._name,this._link))),this._cardElement.querySelector(".place__button").addEventListener("click",this._handleLikeButton),this._cardElement.querySelector(".place__trash").addEventListener("click",this._handleDeleteButton)})),u(this,"_handleLikeButton",(()=>this._cardElement.querySelector(".place__button").classList.toggle("place__button_active"))),u(this,"_handleDeleteButton",(()=>this._cardElement.remove())),u(this,"_getTemplate",(()=>this._cardSelector.content.querySelector(".places__item").cloneNode(!0))),u(this,"getElement",(()=>(this._cardElement=this._getTemplate(),this._setEventListeners(),this._cardElement.querySelector(".place__image").style.backgroundImage="url(".concat(this._link,")"),this._cardElement.querySelector(".place__title").textContent=this._name,this._cardElement))),this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=s}}({name:e.name,link:e.link},s,y).getElement()}(e))}function y(e,t){b.open(e,t)}const E=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}render(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:t,renderer:m},".places");E.render();const v=new class{constructor(e){let{nameSelector:t,professionSelector:s}=e;this._userName=document.querySelector(t),this._userProfession=document.querySelector(s)}getUserInfo(){return{name:this._userName.textContent,profession:this._userProfession.textContent}}setUserInfo(e){let{name:t,profession:s}=e;this._userName.textContent=t,this._userProfession.textContent=s}}({nameSelector:".profile__name",professionSelector:".profile__profession"}),b=new class extends h{open(e,t){this._title=this._popupElement.querySelector(".popup__image-name"),this._image=this._popupElement.querySelector(".popup__image-preview"),this._title.textContent=e,this._image.src=t,this._image.alt="Image of ".concat(e),super.open()}}(".popup_type_preview");b.setEventListeners();const f=new d(".popup_type_edit",(e=>{v.setUserInfo(e)}));f.setEventListeners();const S=new d(".popup_type_add",(e=>{m({name:e.title,link:e.link})}));S.setEventListeners();const L=new _(p,n),g=new _(p,i);L.enableValidation(),g.enableValidation(),o.addEventListener("click",(()=>{const e=v.getUserInfo();f.open(),l.value=e.name,a.value=e.profession,L.resetFormValidation()})),r.addEventListener("click",(()=>{g.resetFormValidation(),S.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,